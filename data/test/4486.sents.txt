Knock Codes are a knowledge-based unlock authentication scheme used on LG smartphones where a user enters a code by tapping or "knocking" a sequence on a 2x2 grid.
While a lesser-used authentication method, as compared to PINs or Android patterns, there is likely a large number of Knock Code users; we estimate, 700,000-2,500,000 in the US alone.
In this paper, we studied Knock Codes security asking participants in an online study to select codes on mobile devices in three settings: a control treatment, a blocklist treatment, and a treatment with a larger, 2x3 grid.
We find that Knock Codes are significantly weaker than other deployed authenti-cation, e.g., PINs or Android patterns.
In a simulated attacker setting, 2x3 grids offered no additional security.
Blocklist-ing, on the other hand, was more beneficial, making Knock Codes' security similar to Android patterns.
Participants expressed positive perceptions of Knock Codes, yet usability was challenged.
SUS values were "marginal" or "ok" across treatments.
Based on these findings, we recommend deploying blocklists for selecting a Knock Code because they improve security but have a limited impact on usability perceptions.
Mobile device unlock authentication has many variations and there have been extensive user-based studies on the security of knowledge-based mobile authentication, including Android graphical unlock patterns [4,47], PINs [10,38,50], as well as using passwords on mobile devices [40].
The conclusion of most of this work is that mobile device users, much like Copyright is held by the author/owner.
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee.
USENIX Symposium on Usable Privacy and Security (SOUPS) 2020.
August 9-11, 2020, Virtual Conference.
with traditional password selection [18,28,39], opt for predictable and easily guessed authenticators.
Additionally several physical attacks have been proposed on knowledge-based mobile authentication, such as smudge attacks [6], sensor attacks [7,12], vision attacks [51], acoustic signals [52], and shoulder surfing [5,19,22].
Into this space, LG developed Knock Codes as a new mobile authentication system that is designed to combat some of these attacks 1 and provide, per LG's advertising, 2 "perfect security."
Knock Codes require a user to recall a pre-selected series of at least 6 and at most 10 knocks 3 (or taps) on a 2 × 2 quadrant which is displayed upon setup and can be entered with the phone screen on or off.
Knock Codes are used less frequently than PINs or Android patterns, but we estimate that there is a large number of Knock Code users, 700,000-2,500,000 in the US alone.To evaluate the security and usability of Knock Codes, we conducted two online user studies on Amazon Mechanical Turk: a preliminary study (n = 218) and a main study (n = 351), analyzing a total of 1,138 Knock Codes (436 in the preliminary study and 702 in the main study).
In the main study, we evaluated three between-group treatments: a control treatment, where participants used the current 2x2 Knock Code interface; a blocklist treatment, where participants selected 2x2 Knock Codes with some popular codes, as measured in the preliminary study, being disallowed; and finally, a big grid treatment, where participants selected Knock Codes on a larger, 2x3 grid.We analyzed the selected Knock Codes across treatments and scenarios for security using standard guessing metrics, considering both an offline attacker with unlimited guesses and an online attacker with a limited number of guesses.
We find that Knock Codes, as currently deployed, offer worse security (51.3 % guessed after 30 attempts) as compared to other widely available unlock authentication schemes, e.g., 4-digit PINs (28.0 %), 6-digit PINs (25.4 %) and Android unlock patterns (36.6 %).
While it seems like a straightforward attempt to increase security, an expanded Knock Code grid to 2x3 does not increase, and sometimes worsens, security as compared to 2x2 Knock Codes.
After 30 attempts, a simulated attacker correctly guesses more 2x3 Knock Codes compared to 2x2 (41 % vs. 37 %).
However, blocklisting common Knock Codes (as collected in the preliminary study) is more effective at improving guessing security: only 19 % of these codes were guessed within 30 attempts in simulation.Overall, participants perceived Knock Codes (across treatments) as secure; however, among all treatments, participants were more hesitant to rate Knock Codes as more secure than PINs, Android Unlock Patterns, or alphanumeric passwords.
Despite the fact that participants reported Knock Codes as "simple" and "memorable", responses to the SUS [11] questions averaged to "marginal" or "ok" usability (69.8, 68.1, and 64.3, for the control 2x2 treatment, the larger 2x3 treatment, and the blocklist informed 2x2 treatment, respectively).
Entry and recall times for Knock Codes were also much slower than what was reported for PINs and Android patterns [27,38], suggesting lower usability.Based on the survey and analysis, we make the following contributions and findings:• We conducted a user study of Knock Codes that considers usability and security analysis.
• We find that Knock Codes, as currently deployed, offer worse security compared to other available methods, both in terms of an online and offline guessing analysis.
• We evaluated different designs for Knock Codes, finding that larger grid sizes offer no benefits (and might actually be less secure) while blocklisting offers promise for improving security.
• We analyzed both qualitative and quantitative feedback of the perceptions of security and usability of Knock Codes, finding that while there are some features of Knock Codes that users like the overall usability was "ok" or "marginal" and the security perceptions were weak compared to other available schemes.These results indicate that users are interested in new forms of mobile authentication, in particular ones that have options for unlocking with the display off.
However, given the usability and security challenges of Knock Codes, we would not recommend further deployment as currently configured.
For users and developers who wish to continue to use Knock Codes, we would recommend using a blocklist to inform selection as it provides increased security with small effects on usability.
While Knock Codes have not been broadly studied in the community, other mobile authentication methods have been investigated widely, namely PINs [16,20], patterns [4,44,47], passwords [29,35], and biometrics [42], as well as adoption rates [27] and authentication times [26].
Research on user-chosen authentication has shown that users tend towards predictable and popular choices, regardless of the authentication method.
For instance, Bonneau et al. [10] studied 4-digit PINs and concluded that while 4-digit PINs fare better in user management and choices, guessing the birthday is an effective strategy to access a user's account.
Wang et al. showed that 6-digit PINs have marginally better security than 4-digit PINs, yet both English and Chinese users fall into certain patterns when choosing PINs [50].
Markert et al. collected PINs specifically primed for mobile authentication and demonstrated that 6-digit PINs offer little (and perhaps worse) benefit than 4-digit PINs against a throttled attacker.
Moreover, non-enforcing blocklists (as deployed by iOS) do not increase security [38].
We use an enforcing blocklist in our data collection, as recommend by Markert et al., and compare Knock Codes to the same RockYou [18] and Amitay [1] datasets used by Wang et al. and Markert et al.
Patterns, or graphical passwords, have been studied in multiple contexts, including smudge attacks [6], shouldersurfing [5,19,23,37], and user strength perceptions [2,3].
The selection process has also been studied [4,44,47], and in all cases, users choices are predictable.
We compare our results to those from Uellenbeck et al. [47] and Aviv et al. [4].
There have also been proposals for incorporating more tactile interaction into mobile authentication.
For example, Deyle and Roth suggested using "tactile pins" [21].
Kuber et al. [32-34] studied tactile stimuli: a special mouse with a 4x4 matrix of PINs for selecting a "tactile password."
Krombholz et al. considered extra touch interactions through pressuresensitive touches on iPhones to enhance PINs [31].
However, these user interaction modalities are very different from Knock Codes.
Similar to Knock Codes, "personal identifiable chords" (PIC) for smartwatches (a multi-touch PIN entered on a 2x2 grid) have been proposed [41]; these differ in setting (smartwatches) and input type (multi-touch), but the approach could be used to improve Knock Codes by adding multi-touch.
Along with security, usability is an important facet regarding the adoption of authentication methods, thus, quantifying user feedback of such methods is pertinent [43].
Regarding biometric adoption and perceptions, users considered biometrics to be more secure than PINs according to Bhagavatula et al. [8].
In addition, usability factors (such as poor lighting for facial recognition) contributed to users' negative feedback and reluctance to adopt this method versus a more convenient method such as fingerprint recognition.
Even with biometrics, this can lead to users choosing weaker forms of knowledgebased authenticators [14].
We collected data via Amazon Mechanical Turk (MTurk) using an online survey whereby participants were directed to use their mobile devices (checked via the user-agent) to select two Knock Codes as well as answer general questions about Knock Codes and their demographics.
The two Knock Codes were primed based on different security scenarios, as informed by prior work of Loge et al. [36].
We found some, but minor, differences between Knock Codes in each scenario, similar to Loge et al.'s findings for Android patterns.We conducted two studies: a preliminary study and a main study which is based on the preliminary study and presented here.
The main difference between the two studies is that the main study was focused on participants using mobile devices while the preliminary allowed participants to use traditional computers.
From the preliminary study, we were able to refine the main study as well as develop a blocklist of the 30 most common Knock Codes selected in the preliminary study (see Table 3).
We provide all study material in the Appendices.
Both studies were approved by our institutional review board (IRB).
We found that usage and awareness of Knock Codes are relatively uncommon.
Only 3% of our participants in the main study responded that they use Knock Codes, see Table 2 and only 1% reported so in our preliminary study.
Despite the low percentages, this suggests that 700K-2.5M users may deploy Knock Codes in the US alone, and we would ideally focus our study just on these users.
This is unfortunately not feasible due to the low concentration on MTurk, and as such, we consider a broader set of study participants who may (or may not) be aware of Knock Codes.
For those unaware of Knock Codes, our survey would simulate their first experience, as would be the case if they were selecting Knock Codes for the first time on a new device.Detailed description of the survey.
The survey consisted of 12 parts as described below.
Please see Appendix A for the exact questions and wording on the pages.
We refer to specific questions within a survey part using the page name and question number.1.
Overview and Informed Consent: Upon starting the survey, participants were informed about the nature of the research (per the requirements of our IRB), and provided general instructions for proceedings.2.
Device Usage Questions: Participants reported on the number of mobile devices (as defined by a smartphone but excluding tablet computers and laptops) they own, the brands they use, and which types of mobile authentication they use on those devices.
We use this data, normalized to US census data, to estimate Knock Code usage.3.
Instructions: As we could not expect participants to be familiar with Knock Codes, we provided detailed instructions of Knock Codes.
This included a GIF animation of a user entering a Knock Code (see Figure 1), a display of the entry screen used later in the survey (see Fig- ure 2), and requirements of Knock Codes (use at least 3 different regions and at least 6 total knocks).
We also introduced the size of the grid, 2x2 for participants who were assigned to the control or blocklist treatment, and 2x3 for the group that tested a larger grid.
Those in the blocklist treatment were not informed of the existence of the blocklist.
A detailed description of the treatments is given later in this section.4.
Practice: After the instructions, participants could practice selecting a sample Knock Code and familiarize themselves with the interface, before proceeding to the actual Knock Code selection.
It was clearly stated that this stage was for practice purposes only.
Participants practiced on the appropriate grid size for their treatment and for those in the blocklist treatment, there was no blocklist in place yet, i.e., no indication that a code would or would not be allowed.5.
Scenario Overview: In addition to a treatment, each participant was assigned to two scenarios under which they would select Knock Codes for protection.
The first of the scenarios was always Device Unlock; the other was either Banking App or Shopping Cart.
These scenarios were adapted from prior work of Loge et al. [36] for collecting Android patterns.
Participants were made aware of both scenarios before proceeding and the order in which they would be asked to select Knock Codes.
On this page, we also highlighted that the selected Knock Code will have to be recalled later, hence, participants were asked to "choose something that is secure and memorable."
6.
Select and Confirm (2x): Participants were prompted to select a Knock Code for the scenario, and confirm it before proceeding.
The respective pages are shown in Figure 2.
Participants of the blocklist treatment saw the warning message shown in Figure 3 if any selection was disallowed.
Table 3 contains the list of blocklisted codes as collected in the preliminary study.
8.
Security Prompts: Now with more familiarity with Knock Codes, participants answered questions about the perceived security of Knock Codes, and also compared it to PINs and Android Unlock Patterns.
Participants also provided qualitative feedback on their security likes and dislikes related to Knock Codes in general.9.
Usability Prompts: We asked the 10 System Usability Scale questions [11] related to Knock Codes (plus an attention test).10.
Recall (2x): Participants were asked to recall their selected Knock Codes.
We allowed up to three guesses for each of the scenarios and forwarded participants if they were not able to recall their Knock Code within this limit.11.
Demographic Questions: Participants answered basic demographic questions about their age, gender, dominant hand, educational background, and technology background.
We also included another attention check question on this page.
.
Submission: The survey ended with participants answering an honesty question (i.e., indicated yes/no to "I honestly participated in this survey and followed instructions completely.")
.
Negative responses were removed from the results, however, all participants were compensated for their work.Treatments.
As part of the study, we assigned participants to one of three treatments.
In addition to the standard implementation of LG's Knock Code, which we refer to as control 2x2 or con-2x2 throughout this paper, we tested two additional ones.We first include a blocklist treatment (blocklist informed 2x2 or bl-2x2) which differs from the control 2x2 treatment by the fact that we blocklisted 30 Knock Codes.
These codes were the most frequently used as measured in the preliminary study (see Table 3).
The blocklist warning, shown in cases of a blocklist hit, is depicted in Figure 3 and is a copy of a warning used by Apple on iOS devices to warn users about an insecure PIN choice.We conjecture that by disallowing participants from selecting these common codes, the Knock Codes they eventually select would be stronger (harder to guess).
There is a risk with blocklists as they may increase frustration during the selection process by having to perform selection multiple times.
But as setting up an authentication method is a one-time event, we wished to understand if blocklists can improve the security of Knock Codes.As another method for increasing security, we considered a modification to the Knock Code interface.
The larger 2x3 treatment (big-2x3) uses a 2x3 instead of 2x2 grid and provides participants with more options for creating a Knock Code.
Theoretically, this increase makes a substantial difference with 72,520,440 possible 2x3 Knock Codes of length 6-to-10, as compared to 1,384,872 2x2 Knock Codes of similar length.
The layout is shown in Figure 2b.
We decided to use a 2x3 grid rather than a horizontal extension (3x2) or making a square (3x3) because of the form factor of the phone's screen, which is taller than it is wide.
The 2x3 grid offers a natural extension that fits within the form factor of the screen and mirrors the same interface.
Table 1 and 2.
As usual for Amazon Mechanical Turk, the participants tended to be younger and predominantly male, but there was diversity in other categories.
A number of our participants reported using Knock Codes on their devices as part of their authentication choice.
As Knock Codes were a new interface to many participants, our design models the scenario where a user acquires and first uses an LG phone to perform the initial Knock Code set-up.
% 0 0 % 29 8 % Professional 1 0 % 1 0 % 0 0 % 2 0 % Doctorate 1 0 % 1 0 % 0 0 % 2 0 % Prefer not to say 0 0 % 0 0 % 1 0 % 1 0 % Backgrnd.Estimating US Knock Code Usage.
We generalized our participants' device usage and authentication methods based on age and normalized it to the US population using census data [48,49].
We saw that LG's market share in the US had a range between 8% to 12% among the estimated 285,300,000 smartphone users [17,45].
Using that, as well as a 95% confidence interval, as our lower and upper bounds, we conclude Even though Knock Codes are not as widely adopted as other traditional methods of mobile authentication, it is still important to study user behavior with real-world, deployed authentication systems.
In addition, on Google Play many Knock Code apps can be installed on any Android device, thus not limiting Knock Codes to solely LG devices.
For instance, the most highly rated Knock Code app on Android, "Knock Lock," boasts more than 1 million installations and claims that it is an innovative lock screen that "will leave intruders baffled" [30].
This app is just one among the plethora of Knock Code knock-off apps that can be found on Google Play, indicating that this authentication method may have a higher adoption rate and influence on mobile authentication systems than appears initially.
There are a number of limitations associated with our methodology and survey design.
One such limitation is that the survey's recall component occurred within a short time frame with minimal distraction tasks.
While we can report on shortterm memorability of Knock Codes, we cannot report on the memorability over extended time periods, e.g., days.However, as a mobile unlock authentication method, users must recall their codes frequently, hence short-term recall Sixteenth Symposium on Usable Privacy and Security 41is still relevant.
The increased use of biometrics, which reduces the number of knowledge-based recalls, confounds the issue though, and more research would be needed to better understand long-term memorability of Knock Codes.
There are also some limitations on how likely the selected Knock Codes would be real Knock Codes of real users.
We believe that the simple interface and the nature of the initial device setup suggest that these Knock Codes would be akin to those used on real devices.
Most of our participants were unfamiliar with Knock Codes when taking the survey and so would be new users of LG devices setting up their Knock Code for the first time.
It should also be noted that a few participants who do use Knock Codes (both in the preliminary study and main study) reported that they reused their Knock Code in the survey.Nevertheless, we attempted to address this limitation and thus decided to provide different security scenarios for which participants should create Knock Codes.
This technique was used by Loge et al. [36] when collecting Android Unlock Patterns.
The motivation is that different scenarios, one always being device unlock, will help users to be more careful about their choices, similar to how they may be during device setup.
In analyzing the data (Section 6), we did not find significant differences between the Knock Codes selected under each scenario for the bl-2x2 treatment but did see some differences for the con-2x2 and larger 2x3 treatment.
The first step in analyzing Knock Codes is to determine the frequency statistics.
Table 4 displays the 30 most frequent patterns, combined, across the scenarios for three treatments of the main study.
The frequencies which we observed in the preliminary study are shown in Table 3.
The preliminary study codes and the con-2x2 codes have a lot of overlap, with 42.0% of the Knock Codes from the preliminary study appearing in the top-30 most frequent codes in the Control 2x2 treatment.
This helps justify using the most frequent preliminary study codes as the basis of the blocklist for the bl-2x2 treatment.Code frequency.
The most common Knock Code in our control dataset is ( f req = 6.9 %).
It starts in the upper left corner, follows a left-to-right sequence, and is repeated until the minimum length of 6 is reached.
We observe a similar strategy for the code ( f req = 4.6 %) which is the most frequent one in the larger 2x3 treatment.
However, participants were able to reach the minimum length without repeating the pattern because of the larger grid.The second most common Knock Code ( f req = 3.9 %) in the control 2x2 treatment starts in the upper left quadrant, moving clockwise.
In contrast to this, ( f req = 4.2 %), the second most 1.6 % 71.6 % 71.6 % 71.6 % 71.6 % 9 61.4 % 61.4 % 11 51.1 % 51.1 % 51.1 % 51.1 % 51.1 % 51.1 % 51 used code in the larger 2x3 treatment, has different attributes: participants proceed diagonally over the grid, going down in a right-left movement for the first diagonal and up in a left-right movement for the second one.
The first half of the third most used Knock Code ( f req = 3.8 %) is identical, yet, it differs at the second diagonal which follows a top-down movement instead of bottom-up.
The third most used Knock Code in the control 2x2 treatment ( , f req = 3.5 %) pursues a left-toright sequence again, however, participants used double taps to comply with the required minimum length of 6 knocks.Participants of the blocklist informed 2x2 treatment used this strategy to an even greater extent: the three most used Knock Codes all contain multiple double taps and 51.0 % of all codes created for this treatment include one or more repeated taps.
In contrast to this, only 41.0 % of the codes in the control 2x2 treatment and 29.0 % of the codes in the larger 2x3 treatment contain at least one repeated tap.
Moreover, the distribution of Knock Codes in the blocklist informed 2x2 treatment is more equal compared to the other two.
The most used Knock Code, , occurs in only 2.6 % of the cases and as can be seen in Table 4 the distribution flattens the fastest.
To summarize, the frequencies of the Knock Codes show different characteristics depending on the assigned treatment, suggesting natural, human tendencies in the selection that can be leveraged in predicting and guessing Knock Codes.
We take advantage of this observation when guessing codes.
Participants in the blocklist informed 2x2 group use more repeated taps whereas codes created for the 2x3 treatment make use of the larger grid and follow directional patterns.
Knock Codes created for the control 2x2 depict a mix and follow both strategies equally.Start/end quadrant frequency.
Figure 4 and 5 present the frequency of start and end taps in the Knock Codes.
Clearly, there is a strong tendency to begin codes in the upper-left.
Similar observations were made for Android Graphical Patterns [47] and is likely due to the left-to-right nature of the English language which is dominant among our participants.
The least common starting points in the preliminary study as well as the control and blocklist treatment were in the lower row.
In the larger 2x3 treatment, on the other hand, the middle row is used the least often.To understand the left/right and up/downshifting of the Knock Codes' start locations we mapped the Cartesian coordinate to each quadrant in the grid, where (-1,1) is the upper left quadrant , (1,1) is the upper right quadrant , (-1,-1) is the lower left quadrant , and (1,-1) is the lower right quadrant .
Similarly, in the larger 2x3 treatment, we mapped the coordinates (-1,1), (1,1), (-1,0), (1,0), (-1,-1), and (-1,1) to the grid spaces, scanning left to right, top to bottom.
We then computed the average x and y coordinate for the start and end taps, across treatments.A Shapiro Wilk's test (p < 0.001) indicated that the generated frequencies are not normally distributed, so a MannWhitney U test was used to identify any initial significance, followed by a posthoc test with Bonferroni correction.
We found significant differences between both the control 2x2 and larger 2x3 treatment (p < 0.001) as well as blocklist informed 2x2 and larger 2x3 (p < 0.001), suggesting that the larger grid size affected how participants chose to start and end their codes.
Sixteenth Symposium on Usable Privacy and Security 43 Code length.
We also analyzed the Knock Codes with respect to length.
The average code length was 6.4, 6.5, and 6.2 in each treatment, con-2x2, bl-2x2, and big-2x3, respectively.
We observed statistical differences using ANOVA ( f = 11.57, p < 0.001) between the treatments.
In post hoc analysis, using pairwise t-test comparison, the difference lies primarily in the longer big-2x3 Knock Codes, which was statistically different from both bl-2x2 (p < 0.001) and the con-2x2 (p < 0.001).
Surprisingly, the larger grid size encouraged slightly shorter Knock Codes.
Regardless, the vast majority of Knock Codes were of length 6, which was the median value, or 8, with a few codes of length 10.
We now analyze the security of Knock Codes.
We start by describing the threat model which we are considering for the attack.
Afterwards, we analyze the security of Knock Codes by using a perfect knowledge metric in Section 6.1 to define an upper bound on generic attack performance.
In Section 6.2, we assess the success rate of a simulated attacker to provide a more realistic security estimation.Threat Model.
We consider a generic, non-targeted attacker that attempts to access an arbitrary victim's device by guessing the Knock Code without additional knowledge or previous observations of the victim.
A targeted attacker who may know the victim's tendencies or previously observed an entry (e.g., via a shoulder surfing attack) would likely perform better than the generic attacker.
A generic attacker, though, provides a lower bound on the scope of attacker performance, and it also provides a clear comparison point to other reported results [4,10,38,47,50] which use the same threat model.For the security analysis, we employ two different attacker variations.
First is a perfect knowledge attacker, which assumes that the attacker has complete knowledge of the frequency order Knock Codes, from most to least frequent.
This attack is still generic as the same strategy is assumed for every victim, and it allows one to estimate the security of the Knock Codes as selected by users.
See Section 6.1 for more details.Second, a simulated attacker who knows a subset of the Knock Codes and constructs a model based on that observed distribution.
The attacker then attempts to guess a set of arbitrary victims' (unknown) Knock Codes.
We use a cross-fold validation to mimic the attacker, whereby the attacker trains on a subset of the data and guesses on an unknown test set.First-Entry 2x2 Codes.
Throughout this section, we refer to a First-Entry 2x2 dataset which contains participants' first entered codes in the control and blocklist treatment.
These codes may or may not have been confirmed (i.e., on the confirm entry screen) either due to lack of recall or because of the blocklist.
We include this dataset, as it offers the perspective of an ideal user choice for how the authenticator may have been selected in the absence of external influences.
As we expected, this dataset is slighter more secure than that of the confirmed control 2x2 codes and offers insights into how users compromise on security to gain more memorable codes.
We consider the guessing strength of Knock Codes against a perfect knowledge attacker as described by Bonneau et al. [9].
A perfect knowledge attack depicts the upper bound for an attack as it assumes that the attacker knows the attacked dataset and always guesses in the ideal order, that is, the Knock Code with the next highest frequency.
This approach has been regularly applied to analyzing mobile authentication, such as Android Patterns [4,44,47] or PINs [38,50].
We use two different perfect-knowledge guessability metrics to evaluate Knock Codes, one based on an offline attack model and one based on an online (or throttled) attack model.
An offline attack model assumes that the attacker can guess as many times as possible, while an online attack model assumes an attacker with a limited number of attempts.
The online attack model better matches the realities of mobile authentication, where users typically have a maximal number of attempts before the device is locked out.
The offline attack model, on the other hand, provides a more holistic approach to measuring the security of a set of user-chosen passwords.
For an offline attack metric, we use partial guessing entropy or α-guesswork ( G α ).
Partial guessing entropy estimates the amount of guesswork that is needed to guess a fraction α of all codes.
The Min-entropy H ∞ depicts a special case as it is only based on the most frequent Knock Code.
As an online (or throttled) attack metric, we use β-success rate.
It essentially measures what fraction of codes would be guessed if the attacker only had β guesses, e.g., λ 3 considers an attack which is limited to 3 guesses.
Table 5 shows the guessing results for our three treatments as well as the combined dataset First-Entry 2x2.
As an additional comparison we included datasets from previous studies for Android patterns [4] as well as 4-and 6-digit PINs [1,50].
Because the datasets all differ in size which would influence the results, we downsampled all marked datasets to the size of control 2x2 and blocklist 2x2 (232 entries) and calculated the statistics for the samples.
To rule out any sampling bias, we repeated this process 500 times, removed outliers using Tukey fences with k = 1.5, and report the median value of the remaining set in Table 5.
With a 95 % confidence level the margin of error is lower than 0.3 % for the online guessing and lower than 0.1 bits for the offline case.Across all comparisons, we find that Knock Codes in the control 2x2 are significantly weaker in terms of their guessability.
This means, Knock Codes as they are currently deployed are more guessable than both 4-and 6-digit PINs as well as Android Patterns.
When considering the First-Entry dataset, the differences are less distinct, but even in this ideal case, the inferiority of Knock Codes remains.Surprisingly, increasing the size of the keyspace by enlarging the grid size to 2x3 offers only little security gain.
Moreover, in some cases increasing the grid size may even decrease security.
This is most apparent when considering a throttled attacker.
After 10 guesses, 31.5% of the larger 2x3 codes are guessed compared to 28.0 % for the control 2x2 codes.
A similar observation can be made after 30 guesses, 53.4 % of larger 2x3 codes are guessed compared to 51.3 % of control 2x2 codes.Future works needs to examine why larger Knock Codes performed so poorly, but a similar phenomenon was observed by Aviv et al. with increasing Android patterns from 3x3 to 4x4 grid sizes [4].
Aviv et al. conjectured, and we do so here as well, that there may be a false sense of security that the larger set of choices offers, whereby users believe their individual choice matters less in the face of the increased number of possibilities.
Analyzing other grid sizes, such as 3x2 or 3x3, would offer additional insight; nevertheless, it is interesting to see that providing more complexity in how to select Knock Codes does not increase the security.Finally, we observed strong security improvements with the introduction of a blocklist.
As compared to the con-2x2, the blocklist cuts the success rate of an attacker within the first 30 attempts by 30 % to 50 % and increases the guesswork by ~1.5 bits when considering an offline attacker.
While the blocklist clearly encouraged more diverse choices, it also had the side effect of increasing user frustration and usability, as we describe later in Section 7.
We are also interested in modeling a more realistic, limitedknowledge attacker that has access to a subset of training data and attempts to guess some test set of unknown data: a simulated attacker.A simulated attacker must model Knock Codes from a training set to predict a test set.
We used a three-gram Markov model probability estimator for the likelihood of a given Knock Code, based on the empirical observations in the test set.
This is a standard approach when analyzing user chose secrets, e.g., passwords [13,24], PINs [50], or Android Patterns [4,47].
In order to encode the start and end transitions, we defined special symbols for transitions to ending/starting nodes.
This can be defined more formally:x = {x −(g−1) , . . . , x −1 , x 0 , x 1 , . . . , x n , . . . , x n+g−1 }where x is the Knock Code of length n with first knock x 1 , and g is the gram size.
If i ≤ 0 or i > n, then this indicates that x i is a start or end transition state.
These extra states are used to capture the early and late transitions taken by a user, for example, for the following Knock Code , we would produce the following set of tri-grams, where ⊥ is a start state and is an end state: (⊥ ⊥ ), (⊥ ), ( ), ( ), ( ) ( ).
Using the transition probabilities, as measured in the training data, the attacker can calculate a likelihood measure of a Knock Code by considering the following Markov model formulation,P(x) = P(len(x)) · P(start(x)) · P(end(x))· n+(g−1) i=−(g−1) P(x i . . . x i+g | x i−1 . . . x i−1+g )(1) Sixteenth Symposium on Usable Privacy and Security 45 where P(·) is the probability function, len(x) is the length function, start(x) is the start function, and end(x) is the end function.
These are our prior probabilities that capture the likelihood of a given length, start quadrant, and end quadrant.
The transition probabilities are captured using the conditional probabilities of each transition between each sub-sequence of length g, given the prior state.
As not all transitions are represented in our dataset, we used constant smoothing to avoid zero probabilities.
The simulated attackers guessing routine, given a training set, is to (1) create a Markov model of the training data; (2) guess patterns in frequency order of the training set, with ties broken by the likelihood estimation; and (3) guess from a set of additional Knock Codes (not in the training set) sorted based on the likelihood estimation.
For (3), we generated a list of all length 6-to-8 Knock Codes for the 2x2 and 2x3 grid sizes, excluding those in our training set that were previously guessed.
This accounted for 1,384,872 and 72,520,440 additional 2x2 and 2x3 Knock Codes that could be guessed, respectively.
In our blocklist treatment, we assumed the attacker had knowledge of the blocklist.The results of our simulated attacker are presented in Table 6, and a graphical representation is provided in Figure 6.
We report on the average of five randomized cross-fold validations.
As expected, the simulated attacker performs worse than the perfect-knowledge attacker, but we find similar results comparing across treatments.
Notably, the 2x3 Knock Codes offer little, or worse, security while there is marked improvement for the blocklist informed 2x2 Knock Codes.
In this section, we focus on the usability metrics of Knock Codes.
We first report results on the setup and recall times.
Afterwards, we will focus on memorability and recall rates within our study, followed by the qualitative and quantitative responses to security and usability prompts.
(a) Guessing performance of an unthrottled attacker.
Table 7 presents the average selection and recall times, as well as the number of attempts, needed to select a Knock Code.
Outliers were removed using Tukey fences with k = 1.5.
Participants needed on average 16.2 s and 18.4 s to select and confirm a 2x2 and 2x3 Knock Code, respectively.
This is faster than the blocklist treatment (22.5 s), where participants also had to make more attempts due to blocklisting (1.5 vs. 1.1 attempts).
In comparison, setting up a 4-or 6-digit PIN takes on average only 7.9 and 11.5 seconds respectively [38] which is significantly faster than Knock Codes.
While the described discrepancy between Knock Codes and PINs is distinct, the numbers for PINs may be lower since users are presumably more familiar with PINs as compared to Knock Codes.
The differences may decrease with increased familiarity with Knock Codes.
In terms of the recall, which can be compared to unlocking a smartphone, the 2x2 (7.2 s per attempt) and 2x3 Knock Codes (7.1 s per attempt) are more efficient than Knock Codes selected with a blocklist (7.4 s per attempt).
With 1.2 attempts per entry, it took participants 11.3 seconds to enter their Knock Codes for the blocklist treatment.
Compared to entering an Android pattern (3.0 s) or a PIN (4.7 s) [27], clear usability issues with Knock Codes emerge as entering them is twice as slow.
With greater use of Knock Codes, these differences may decrease, but it is unlikely that Knock Codes will be as efficient to enter as patterns or PINs.
We will now go into more details on the memorability as it depicts an important benchmark for any authentication method.
We analyzed the memorability of Knock Codes by looking at the recall rates at the end of the survey.
While this is an imperfect measure for the memorability, as the survey took most participants less than 10 minutes to complete, it does speak to potential underlying usability issues, particularly if codes were not properly recalled in this short window.We separated the recall rates based on each treatment.
The con-2x2 treatment participants successfully recalled their codes 88.8 % of the time.
The participants with the larger 2x3 grid had higher recall rates of 92.9 %, which may suggest an interesting usability vs. security trade-off as this group chose shorter and also some of the weakest Knock Codes.
However, we did not find significant differences between the con-2x2 and big-2x3 recall rates using a χ 2 test.
We would expect long term memorability rates to be equally high, but further study would be needed to confirm that conjecture.The worst recall rate came from participants in the bl-2x2 treatment: 80.6 % successfully recalled their Knock Code, and the result was significantly different from the other two recall rates (p < 0.0001 for both comparison tests).
This could be attributed to the impact of the blocklist, where participants who hit the blocklist had lower recall rates (66.0 %) than those that did not (84.9 %).
Most likely, the blocklist affected users in two ways.
First, participants who chose blocklisted codes were forced to select multiple codes until landing on one that was not blocklisted.
The average number of blocklisting events per user who hit the blocklist was 1.4.
Second, that final Knock Code chosen ended up being more complex (as evident in the prior section), and thus harder to recall.
Again, this suggests a clear trade-off between usability and security.We also analyzed the number of attempts to successfully recall a Knock Code.
We found no statistical difference across all treatments between the attempts made in recalling the first or second scenario Knock Code correctly.
In the big-2x3 treatment and the con-2x2 treatment, participants took on average 1.1 attempts when recalling a Knock Code correctly, with 3 attempts as the maximum.
For the bl-2x2 group, users took on average 1.2 attempts to correctly recall a Knock Code, again having a maximum of 3 attempts.
Again, we find bl-2x2's result to be significantly different in terms of the number of attempts made in the other treatments (p < 0.001 vs. big-2x3 and p < 0.001 vs. con-2x2), thus showing that the blocklist has an impact on recalling Knock Codes, even for those participants that eventually correctly do so.
It is important to note though, that users had a maximum limit of 3 attempts to recall their code before we considered it "cannot be recalled" for the purpose of expediting the survey.We also analyzed how participants failed to recall their Knock Codes by calculating the average edit distances between the submitted code and the true code for both recalls attempts, one for each scenario.
We determined that there was no statistical difference between the average edit distances among treatments.
The average edit distance between correct and incorrect recalls was 3.6, suggesting that when users get a code wrong, they get it wrong by a large margin, as the median length Knock Code is 6.
Users provided their opinions and insights regarding Knock Codes' usability and security.
We coded these free responses using two independent reviewers where disputes in coding were resolved until consensus was reached.
The specific codes and their frequencies are presented in the Appendices.Overall Knock Codes were perceived positively by users, citing that they were "Easy," "Quick," and "Hard to Guess."
The uniqueness of Knock Codes also appealed to users who indicated they especially liked the fact that it is a "Discreet" and "Secure" authentication method which can be inconspicuous and hidden from others.For many of the participants, this was a new method of authentication, and they employed various tactics when choosing their Knock Codes.
We observed such strategies in determining memorable yet secure codes.
To make the Knock Code more memorable, the majority of users opted to use some sort of "Pattern" or "Variation" that would be "Sim- ple."
Other techniques users employed include "Directional," "Shape," "Game," and "Repeated."
Often, users would create codes based on something "Personal" to them, such as the letter of a word that had meaning to the user.While many users did not have a specific strategy for security and still focused on making their code "Easy to Remember" as the main priority, others determined that using "All Quadrants" or " Multiple Regions," as well as making the code "Long" or "Random" or being "Unexpected" and "Different" would secure their codes.
Making their codes "Hard to Guess" often included attempts to obfuscate the number of clicks and the regions, using speed and potentially unpredictable tactics.
Users continued to use similar tactics for memorability to double as security in their Knock Codes, for instance having "Repeated" regions.Upon comparing Knock Codes with other forms of security, on average users found passwords, PINs, and Android patterns to be more secure than Knock Codes (see Figure 7).
Overall, users found Knock Codes adequately secure, i.e., being difficult to hack, resistant to smudge attacks and shoulder surfing.
However, they were not completely convinced about Knock Codes' security.
Users expressed what they disliked overall, specifically that they found Knock Codes "Hard to Remember" and "Insecure," paving the way for an attacker to easily guess a Knock Code.
They also found the interface provided "No improvement" and disliked how it was " Hard to type-in" the Knock Codes.To have a more general opinion of the overall usability of Knock Codes, we employed the System Usability Scale (SUS).
The full Likert responses are found in the Appendices.
The average response for the con-2x2 treatment is 69.8, the big-2x3 is 68.1, and the bl-2x2 is 64.3.
These scores are generally rated as "ok" or "marginal," with only the control treatment potentially offering some above-average usability.
As reported above, while most participants offered some positive thoughts, their perception of the security of Knock Codes lagged behind other deployed options, and the SUS values for all schemes were "ok" or "marginal."
There was some positive feedback on Knock Codes which suggests an openness to new designs in mobile authentication, particularly to authentication that can be entered while the phone screen is off.
There was also increased perceptions of security from targeted attacks, e.g., via shoulder surfing [5,19,22].
It is reasonable to view Knock Codes as offering new design concepts that can ultimately improve mobile authentication.However, we find that Knock Codes, as currently deployed, provide weaker security than other available knowledgebased, mobile unlock methods, such as 4-/6-digit PINs and Android patterns.
This is far from the "perfect security" promised by LG's advertisement of Knock Codes.
As such, we cannot recommend deploying Knock Codes in their current form as compared to alternative authentication options.Our results also indicate that a straightforward improvement like increasing the grid size to 2x3 may offer little or worse security.
Blocklisting common Knock Codes, on the other hand, does provide more resilience to a throttled attacker, as has been found in password authentication [25] and PINs [38].
Yet, blocklisting runs the risk of increasing user frustration during selection, but since selecting a Knock Code is a one-time event, the usability trade-off of adding a blocklist may be extremely worthwhile if Knock Codes continue to be available to LG users.
It may also be worthwhile for designers to invest in other methods for improving Knock Code selection, e.g., forcing users to start or end at given quadrants, similar to SysPal [15], or using multi-touch, like chords [41].
We performed the first comprehensive user study and security analysis of user-chosen Knock Codes using a three-treatment, between groups study: a control 2x2 treatment, a blocklist 2x2 treatment, and a 2x3 treatment.
We find that Knock Codes provide weaker security than other mobile unlock authentication, such as 4-digit PINs, 6-digit PINs, and Android pattern, and that increasing the grid size offered little (or worse) security outcomes, while the addition of a blocklist of common codes substantially increased the security against a throttled attacker.
However, Knock Codes suffered in terms of usability, both in terms of entry/recall time and user perception.
For the remainder of this survey, you will be asked to create Knock Codes for different scenarios.
Importantly, you will need to recall these codes later.
So choose something that is secure and memorable.
However, we ask that you DO NOT write down your codes or use other aids to help you remember.
I understand that I should not write down my codes or use other aids to assist in the survey:• I understand You will be asked to create Knock-Knock Codes for the following scenarios.All participants were assigned to Device Unlock, and then one of either Banking App or Shopping Cart.
Steps 5, 6, and 7 were done twice.
First for the Device Unlock, then for the banking or shopping scenario.
Select a Knock Code for [SCENARIO] 6.
Confirmation Confirm the Knock Code for [SCENARIO] 7.
Thinking about the Knock Code you just chose, answer the following questions.
As part of this survey, you will be asked to select your own Knock Codes using an on-screen approximation of a smartphone.
You will enter your codes by clicking on different regions of a 2x2 grid with your mouse.
Below is an image of the 2x2 grid and smartphone approximation.
There are some rules!
When selecting a Knock Code it must:1.
Use at least 3 regions of the grid.2.
Use at least 6 total knocks.On the next page, you will have a chance to practice entering Knock Codes after which you will proceed with the rest of the survey.
Participants performed a practice run of using the interface.
After completion, they were given the option to continue.
For the remainder of this survey, you will be asked to create Knock Codes for different scenarios.Importantly, you will need to recall these codes later.
So choose something that is secure and memorable.
However, we ask that you DO NOT write down your codes or use other aids to help you remember.I understand that I should not write down my codes or use other aids to assist in the survey:• I understand You will be asked to create Knock-Knock Codes for the following scenarios.All participants created Device Unlock, and then one of either Banking App or Shopping Cart.
The order was randomized.-Device Unlock Create a Knock Code you would use to unlock your smartphone or tablet.-Banking App Create a Knock Code you would use to secure access to your mobile banking application.-Shopping Cart Create a Knock Code you would use to protect your Amazon shopping cart.I understand that I should not write down my codes or use other aids to assist in the survey:• I understand Steps 5, 6, and 7 were done twice.
For the Device Unlock and for the banking or shopping scenario.
The order was randomized.
Sixteenth Symposium on Usable Privacy and Security 57 SA Survey Material A.1 Main Study 1.
Device Usage Questions When referring to "mobile devices" throughout this survey, consider these to include smartphones and tablet computers, such as iPhone and Android phones and tablets.
Traditional laptop computers, two-in-one computers, like the Microsoft Surface, or e-readers, like the Amazon Kindle, are not considered mobile devices for the purposes of this survey.1.
How many mobile devices do you use regularly?
(Including phones and tablets, but excluding laptops) Where indicated, the text and the graphics on the following pages changed depending on the assigned grid size.
There are some rules!
When selecting a Knock Code it must:1.
Use at least 3 regions of the grid.2.
Use at least 6 total knocks.On the next page, you will have a chance to practice entering Knock Codes after which you will proceed with the rest of the survey.Participants performed a practice run of using the interface.
After completion, they were given the option to continue.
Practice8.
Thinking about the Knock Code you just chose, answer the following questions.1.
I feel this Knock Code provides adequate security for this scenario.
• 4.
What strategy did you use to make your code more memorable?
Answer:9.
Please answer the following questions/prompts.
Select your agreement/disagreement with the following statements Security RANDOM 78Randomized use of quadrants and taps "I tried to use random blocks to make it harder to guess."
EASY TO REMEMBER 70 Prioritized memorability over security "I was more concerned with it being easy to remember than security."
LONG 56Made codes longer as a means of security "I tried to lengthen it to make it harder to crack."
ALL QUADRANTS 52 Used all quadrants in the provided grid "Using all the squares on all of the regions" UNEXPECTED 44 Avoided predictable patterns "I tried to make it slightly more unpredictable than I normally would."
NONE 42Did not use any strategy for security "Since this is not for my device I did not try to make it that secure.
If it were my device I would write it down and it would be extensive."
MULTIPLE QUADRANTS 40 Used a variety of quadrants, not necessarily all "I tried to use multiple squares more than once to make it more secure."
HARD TO GUESS 38 Chose a code that is difficult to guess "Something I didn't think anyone could guess."
DIFFERENT 37Using a different code than the first one "I needed it to be drastically different then [sic] the first code."
Memorability PATTERN 104Visualized a sequence or pattern "Not overly random but three blocks of two patterns" SIMPLE 100 Used simple methods "I used something that wasn't to [sic] complicated" EASY TO REMEMBER 77 Focused on overall memorability "Something easy for me to remember but hard for someone else" DIRECTIONAL 76 Went in a specific sequence or order "I used a specific direction as my way to remember like opening a box or lifting a lid."
REPEATED 55 Tapped same quads multiple times "I started at the top left quadrant and went clockwise."
PERSONAL 52 Associated code with something personal "I assigned numbers to the quadrants and input a date I'd remember."
NONE 51 Had no strategy "Didn't use one."
VARIATION 40 Altered previous codes "I used a combination that was similar to my other code but with a Twist."
SHAPE 38 Followed a specific shape "I patterned it off of a shape I would remember.
In this case it was an underlined x." GAME 18Used or made a game out of the sequence "I tried to imagine a song pattern like Simon says.
"Found usability to be simple/straightforward "Simple to input doesn't need much screen confirmation."
HARD TO GUESS 42 Considered it a complex authentication "I like how you can switch the codes up to many different patterns.
It really makes it harder for people to guess what it is."
DISCREET 40Liked that it was/can be hidden and discrete "You can be surreptitious and lock or unlock things without seeming like you are."
QUICK 39 Found it to be efficient and quick "It seems very convenient it can be quick and it gets old typing in my pin so much."
FUN 32Found it fun to use "I like that they are unique and I like entering them it is enjoyable."
Dislike HARD TO REMEMBER 124Found it difficult to recall codes "It's seems hard to remember the different patterns" INSECURE 90 Found it to be a less complex authentication "Same thing as a pin without the numbers and with less combination possibilities."
HARD TO TYPE 19 Found it difficult to input "I could easily forget or tap the wrong location especially if there is no grid.
Also it doesnt seem as fast as using a pattern to unlock like I currently do.
."
NONE 16 Had no issues "Can't think of anything I overly dislike."
NOT AN IMPROVEMENT 7 Considered it not better than other existing authentication methods "There is absolutely no reason to use them for me or most people.
They are hard to remember and not any different from a pin code.
"Security: What strategy did you use to make your code more memorable?
Memorability: What strategy did you use to make your code more secure?
A Survey Material A.1 Main Study 1.
Device Usage Questions When referring to "mobile devices" throughout this survey, consider these to include smartphones and tablet computers, such as iPhone and Android phones and tablets.
Traditional laptop computers, two-in-one computers, like the Microsoft Surface, or e-readers, like the Amazon Kindle, are not considered mobile devices for the purposes of this survey.1.
How many mobile devices do you use regularly?
(Including phones and tablets, but excluding laptops) Where indicated, the text and the graphics on the following pages changed depending on the assigned grid size.
There are some rules!
When selecting a Knock Code it must:1.
Use at least 3 regions of the grid.2.
Use at least 6 total knocks.On the next page, you will have a chance to practice entering Knock Codes after which you will proceed with the rest of the survey.Participants performed a practice run of using the interface.
After completion, they were given the option to continue.
8.
Thinking about the Knock Code you just chose, answer the following questions.1.
I feel this Knock Code provides adequate security for this scenario.
• 4.
What strategy did you use to make your code more memorable?
Answer:9.
Please answer the following questions/prompts.
Select your agreement/disagreement with the following statements Randomized use of quadrants and taps "I tried to use random blocks to make it harder to guess."
EASY TO REMEMBER 70 Prioritized memorability over security "I was more concerned with it being easy to remember than security."
LONG 56Made codes longer as a means of security "I tried to lengthen it to make it harder to crack."
ALL QUADRANTS 52 Used all quadrants in the provided grid "Using all the squares on all of the regions" UNEXPECTED 44 Avoided predictable patterns "I tried to make it slightly more unpredictable than I normally would."
NONE 42Did not use any strategy for security "Since this is not for my device I did not try to make it that secure.
If it were my device I would write it down and it would be extensive."
MULTIPLE QUADRANTS 40 Used a variety of quadrants, not necessarily all "I tried to use multiple squares more than once to make it more secure."
HARD TO GUESS 38 Chose a code that is difficult to guess "Something I didn't think anyone could guess."
DIFFERENT 37Using a different code than the first one "I needed it to be drastically different then [sic] the first code."
Visualized a sequence or pattern "Not overly random but three blocks of two patterns" SIMPLE 100 Used simple methods "I used something that wasn't to [sic] complicated" EASY TO REMEMBER 77 Focused on overall memorability "Something easy for me to remember but hard for someone else" DIRECTIONAL 76 Went in a specific sequence or order "I used a specific direction as my way to remember like opening a box or lifting a lid."
REPEATED 55 Tapped same quads multiple times "I started at the top left quadrant and went clockwise."
PERSONAL 52 Associated code with something personal "I assigned numbers to the quadrants and input a date I'd remember."
NONE 51 Had no strategy "Didn't use one."
VARIATION 40 Altered previous codes "I used a combination that was similar to my other code but with a Twist."
SHAPE 38 Followed a specific shape "I patterned it off of a shape I would remember.
In this case it was an underlined x." GAME 18Used or made a game out of the sequence "I tried to imagine a song pattern like Simon says.
"Found usability to be simple/straightforward "Simple to input doesn't need much screen confirmation."
HARD TO GUESS 42 Considered it a complex authentication "I like how you can switch the codes up to many different patterns.
It really makes it harder for people to guess what it is."
DISCREET 40Liked that it was/can be hidden and discrete "You can be surreptitious and lock or unlock things without seeming like you are."
QUICK 39 Found it to be efficient and quick "It seems very convenient it can be quick and it gets old typing in my pin so much."
FUN 32Found it fun to use "I like that they are unique and I like entering them it is enjoyable."
Found it difficult to recall codes "It's seems hard to remember the different patterns" INSECURE 90 Found it to be a less complex authentication "Same thing as a pin without the numbers and with less combination possibilities."
HARD TO TYPE 19 Found it difficult to input "I could easily forget or tap the wrong location especially if there is no grid.
Also it doesnt seem as fast as using a pattern to unlock like I currently do.
."
NONE 16 Had no issues "Can't think of anything I overly dislike."
NOT AN IMPROVEMENT 7 Considered it not better than other existing authentication methods "There is absolutely no reason to use them for me or most people.
They are hard to remember and not any different from a pin code.
"Security: What strategy did you use to make your code more memorable?
Memorability: What strategy did you use to make your code more secure?
