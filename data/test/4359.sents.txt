Fingerprint authentication has gained increasing popularity on mobile devices in recent years.
However, it is vulnerable to presentation attacks, which include that an attacker spoofs with an artificial replica.
Many liveness detection solutions have been proposed to defeat such presentation attacks; however, they all fail to defend against a particular type of presentation attack, namely puppet attack, in which an attacker places an unwilling victim's finger on the fingerprint sensor.
In this paper, we propose FINAUTH, an effective and efficient software-only solution, to complement fingerprint authenti-cation by defeating both synthetic spoofs and puppet attacks using fingertip-touch characteristics.
FINAUTH characterizes intrinsic fingertip-touch behaviors including the acceleration and the rotation angle of mobile devices when a legitimate user authenticates.
FINAUTH only utilizes common sensors equipped on mobile devices and does not introduce extra usability burdens on users.
To evaluate the effectiveness of FINAUTH, we carried out experiments on datasets collected from 90 subjects after the IRB approval.
The results show that FINAUTH can achieve the average balanced accuracy of 96.04% with 5 training data points and 99.28% with 100 training data points.
Security experiments also demonstrate that FINAUTH is resilient against possible attacks.
In addition, we report the usability analysis results of FINAUTH, including user authentication delay and overhead.
In recent years, fingerprint sensors have been widely integrated into smartphones and tablets.
Combined with Fast IDentity Online (FIDO) [11] and other protocols, a fingerprint sensor enables applications [71], such as mobile banking, to locally authenticate end users instead of asking them to type passwords on a small touchscreen [1,7].
It is estimated that 920 million global shipments of smartphones (about 64%) * The corresponding authors are Kun He and Jing Chen.
were equipped with a fingerprint sensor in 2017, and the number will increase to 1.25 billion (about 75%) by 2020 [8].
However, fingerprint authentication is vulnerable to presentation attacks [70], where attackers bypass the authentication using artificial crafts, e.g. gummy fingers that have fingerprint impressions, or human-based instruments [39].
To defend against presentation attacks, hardware-based solutions rely on additional hardware to acquire biological traits, such as blood pressure [42], odor [15], oxygen saturation [59], heartbeat [10], and electrocardiograph [40].
And, software-based solutions utilize image processing to extract more discriminative physical characteristics, such as the size of fingerprint ridges [55], density [26], continuity [58], texture [27], and train the detection model via machine learning methods to enhance the security against fingerprint spoofs [30,56].
Unfortunately, existing methods to enhance the security of fingerprint authentication only focus on liveness detection, which determines whether the input fingerprint comes from a live human being.
These systems are powerless against puppet attacks, in which an attacker places an unwilling but legitimate victim's finger on the fingerprint sensor, e.g., the victim is sleeping or passed out.
Puppet attack was highlighted in ISO/IEC 30107 [39], and of increasing concern because it is easy to perform [2].
Because the fingerprint and other biological traits are collected from the real and legitimate user in puppet attacks, existing liveness detection methods all fail [4].
Even though combining fingerprint with behavioral biometrics is a promising approach in defeating puppet attacks, existing behavioral biometrics, including keystroke dynamic [34], gesture pattern [65], and gait pattern [49], are not suitable to enhance the security of fingerprint authentication due to the following reasons: i) these methods place extra usability burdens on users by requiring additional gestures; ii) these methods rely on behavioral biometric information collected in a relatively long time, e.g. more than 1 second [65], while fingerprint authentication happens in 0.29 seconds on average based on our experiments (Section 7.4).
The key challenge in designing a practical puppet-attack-resistant fingerprint authentication is to detect impostors promptly without undermining the usability of fingerprint authentication.To overcome this challenge, we utilize the intrinsic fingertip-touch characteristics to model users' movements in legitimate authentications to defend against all presentation attacks, including the puppet attack.
The term of fingertiptouch in this paper refers to the behavior completed in an instant when a user gets the mobile device in hand and applies his/her finger to fingerprint sensors.
We model these movements with acceleration and rotation angle, which can be retrieved from built-in sensors, such as accelerometer, magnetometer, and gyroscope.
This is inspired by the fact that users place their fingers on a fingerprint sensor to perform authentication repeatedly (average 50 times a day [72]) and these habitual behaviors form stationary and unique muscle memory [9,63].
We identify latent time-and frequency-domain features, and use the convolutional neural network (CNN) to extract discriminative features from characterized behavior, i.e., accelerations and rotation angles.
We develop an effective and efficient authentication system named FINAUTH, which can be easily deployed on mobile devices as auxiliary authentication for fingerprint authentications without introducing additional hardware or gestures.Attack Models.
We consider the following three types of attacks: i) Artificial replica attack: the attacker can forge fake fingerprints to spoof the fingerprint system [17]; ii) Puppet attack: the attacker can put an unwilling victim's finger on the fingerprint sensor [39]; iii) Mimicry attack: the attacker knows how our approach works and attempts to defeat our approach by mimicking the victim's movements in authentication [34].
FINAUTH can defeat the first two types of attackers.
Also, it is difficult for the third type of attackers to bypass FINAUTH.The contributions of this paper are summarized as follows:• We propose FINAUTH to complement fingerprint authentication for defending presentation attacks, including the puppet attack.
FINAUTH models a user's intrinsic fingertip-touch behavior during fingerprint authentication.
FINAUTH uses built-in sensors and does not require additional hardware.
• To evaluate the performance of FINAUTH, we collected a dataset of fingertip-touch behavior data from 90 subjects.
Our experimental results show that FINAUTH can achieve a balanced accuracy of 96.04% with only 5 training data points, while the balanced accuracy can be improved to 99.28% with 100 training data points.
• We demonstrate the security of FINAUTH in defeating three types of attacks, including artificial replica attacks, puppet attacks, and mimicry attacks.
Experiment results show that attack success rates are all below 0.3% under the authentication model trained using 100 data points.The rest of this paper is organized as follows.
Section 2 presents the overview of FINAUTH.
In Section 3, we intro- duce the data preprocessing and the method to characterize fingertip-touch behaviors.
Sections 4 and 5 illustrate feature processing and classification approaches.
We describe details of experiment design and data collection in Section 6.
Section 7 reports experimental results of reliability, security, and usability.
We review related work in Section 8, and discuss our study in Section 9.
Section 10 concludes this paper.
Similar to most authentication schemes, FINAUTH consists of two phases: enrollment and authentication.
In enrollment, FINAUTH builds a user profile from the first successful fingerprint authentications.
After a user profile is built, FINAUTH enters the authentication phase, in which FINAUTH assists the fingerprint sensor to authenticate a user.FINAUTH only employs built-in sensors on smart devices, including accelerometer, gyroscope, and magnetometer, to sense phone movements incurred by fingertip-touch behaviors.
The accelerometer and gyroscope are motion sensors, which can monitor device movement.
The magnetometer is a position sensor to determine a device's physical position in the real frame of reference, which is leveraged for data calibration to acquire more precise motion information.As shown in Figure 1, FINAUTH consists of three modules, including data preprocessor, feature extractor, and authenticator.
The data preprocessor runs in the background to monitor fingerprint authentication events.
Upon detecting fingerprint-inputting, data preprocessor starts to collect accelerometer, gyroscope, and magnetometer data.
Then, data preprocessor uses wavelet denoising method to reduce noise.
FINAUTH characterizes fingertip-touch behaviors using accelerations and rotation angles.
For the feature extractor, FINAUTH generates power spectral density for characterized fingertip-touch behavior information using short-time Fourier transform (STFT), and then uses CNN-based feature extractor to extract features.
To profile legitimate users with only successful login data points, FINAUTH trains a machine learning model based on a one-class classifier, which is later used for authentication.
In this section, we present the data collection and preprocessing approaches adopted by FINAUTH.
We also illustrate how FINAUTH characterizes fingertip-touch behaviors.
Data collection.
Once a user places her finger on the fingerprint sensor, FINAUTH starts to collect accelerometer, gyroscope, and magnetometer data for a short period t with the sampling rate f s .
For each authentication attempt, FINAUTH collects n (n = t × f s ) samples of sensor data.
Each sample is 9-dimensional denoted as (a r x , a r y , a r z , g r x , g r y , g r z , m r x , m r y , m r z ), where r stands for raw data, a, g, m represent accelerometer, gyroscope, and magnetometer data respectively, and x, y, and z represent the three axes.
We use a row vector, e.g. a a a r = (a r x , a r y , a r z ), to denote a data sample from a sensor and use a column vector, e.g. a a a r x = (a r x,1 ,...,a r x,n ) T , to represent all n samples at one axis (e.g. x-axis).
Denoising.
Because slight vibrations, even sounds, can introduce measurable noise to the built-in sensors [43], it is important to reduce the noise from the sensed data.
We apply wavelet denoising [79], which is widely used in signal processing, on the column vectors of the sensed data (e.g. a a a r x ).
A denoised sample is represented as (a x , a y , a z , g x , g y , g z , m x , m y , m z ).
From the denoised data, we use accelerations and rotation angles to characterize fingertip-touch behaviors.Accelerations.
Accelerations of a device can represent the dynamic force acting upon a device from a user.
We use the accelerations along the three axes at the device coordinate system (a x , a y , a z ) and the net acceleration (a 񮽙 = 񮽙 a 2 x + a 2 y + a 2 z ) to model fingertip-touch characteristics.
The coordinate system of a smartphone is shown as Figure 2.
Rotation angles.
A fingertip-touch behavior also causes a device to rotate slightly.
As shown in Figure 2, we use the classical Euler angle parameterization to represent the rotations, which are denoted as roll (φ), pitch (θ), and yaw (ψ).
We compute the rotation angles using the sensed data through the following steps [16,73]: 1) the coarse angles (φ c , θ c , ψ c ) are computed using accelerometer and magnetometer data as shown in Eq.
1, 2, and 3 [75].
φ c = arctan( −a y 񮽙 −a 2 x + a 2 z ) (1) θ c = arctan( −a x a z ) (2) ψ c = arctan sin(φ c )sin(θ c )m x + cos(φ c )m y + sin(φ c )cos(φ c )m z cos(θ c )m x + sin(θ c )m z .
(3)2) to get more accurate angles, we then use the gyroscope data to get the partial derivatives of φ, θ, ψ with respect to time( ∂(φ) ∂(t) , ∂(θ) ∂(t) , ∂(ψ) ∂(t)).
The gyroscope measures the angular velocity, and the dynamic angle can be obtained by integrating the angular velocity, which is given in Eq.
4 [57].
⎡ ⎢ ⎢ ⎣ ∂(φ) ∂(t) ∂(θ) ∂(t) ∂(ψ) ∂(t) ⎤ ⎥ ⎥ ⎦ = ⎡ ⎣ 1 sin(φ c )tan(θ c ) sin(φ c )tan(θ c ) 0 cos(φ c ) −sin(φ c ) 0 sin(φ c )/cos(θ c ) cos(φ c )/cos(θ c ) ⎤ ⎦ ⎡ ⎣ g x g y g z ⎤ ⎦(4)3) we then use extended Kalman filter (EKF) to perform sensor data fusion, which is widely used for state estimation and tracking due to its robustness in nonlinear dynamic environments [52].
The EKF method takes time-varying drift into account via defining an error metric and updating covariance metric iteratively to minimize this error.
Specifically, the system state vector x x x of EKF in our work is given as Eq 5.x x x = [q q q T , w w w T ] T = [q 0 , q 1 , q 2 , q 3 , ∂(φ) ∂(t) , ∂(θ) ∂(t) , ∂(ψ) ∂(t) ] T (5)where T denotes the transpose operator,w w w T = [ ∂(θ) ∂(t) , ∂(ψ) ∂(t) , ∂(ψ) ∂(t) ], which are estimated values with Eq.
4.
q q q is the quaternion (four-element vector), which can be acquired based on the relationship between Euler Angles and quaternion as shown in Eq.
6.
q q q = ⎡ ⎢ ⎢ ⎣ q 0 q 1 q 2 q 3 ⎤ ⎥ ⎥ ⎦ = ⎡ ⎢ ⎢ ⎢ ⎣ cos φ c 2 cos θ c 2 cos ψ c 2 + sin φ c 2 sin θ c 2 sin ψ c 2 sin φ c 2 cos θ c 2 cos ψ c 2 − cos φ c 2 sin θ c 2 sin ψ c 2 cos φ c 2 sin θ c 2 cos ψ c 2 + sin φ c 2 cos θ c 2 sin ψ c 2 cos φ c 2 cos θ c 2 sin ψ c 2 − sin φ c 2 sin θ c 2 cos ψ c 2 ⎤ ⎥ ⎥ ⎥ ⎦(6)where φ c , θ c , and ψ c are estimated with the fusion of both accelerometer and magnetometer based on Eq.
1, 2, and 3.
q 1 , q 2 , q 3 , q 4 are elements of the unit quaternion.
The measurement of the asymmetry of the probability distribution of a real-valued random variable about its mean.
We compute accurate quaternions, where the detailed steps are presented in Appendix B due to the page limit.
Finally, rotation angles can be computed based on Eq.
7.
⎧ ⎪ ⎨ ⎪ ⎩ γ = arctan ( 2q 2 q 3 +2q 0 q 1 2q 2 0 +2q 2 3 −1 ) θ = − arcsin (2q 1 q 3 − 2q 0 q 2 ) ψ = arctan ( 2q 1 q 2 +2q 0 q 3 2q 2 0 +2q 2 1 −1 )(7)The outcome of characterizing fingertip-touch behaviors is represented as (a a a x , a a a y , a a a z , a a a 񮽙 , φ φ φ, θ θ θ, ψ ψ ψ), where each of element is an n-dimensional vector.
We present two methods to extract discriminative features from fingertip-touch behaviors.
We extract features in the time-and frequency-domain from (a a a x , a a a y , a a a z , a a a 񮽙 , φ φ φ, θ θ θ, ψ ψ ψ).
As shown in Table 1, we extract six statistical features in the time domain, including mean, standard deviation, relative standard deviation, sum of absolute differences, absolute energy, and autocorrelation.
In addition, we apply fast Fourier transform and extract another six features in the frequency domain.
These features include spectral centroid, spread, skewness, kurtosis, power density, and entropy.
These time-and frequency-domain features are widely used for time series analysis [24,44,46].
Selected Features.
We computed the Fisher's scores [35] for all aforementioned 84 features with 45, 000 data points collected from 90 users to select the most discriminative features.As the results show in Table 1, the features from rotation angle have higher Fisher's score than features from acceleration.
Features with a normalized Fisher's score higher than 0.6 are selected.
The output of features extraction and selection in time and time-domain is a 43-dimensional feature vector.
Besides the extracted time-and frequency-domain features, we also resort to CNN-based feature learning.
To this end, we first apply STFT and convert the time series data (e,g., a a a x ) to a two-dimensional power spectral density matrix.
Then, we concatenate these matrices and rely on CNN models to extract features from them.
Figure 3 shows three users' spectrograms from a a a x , a a a y , a a a z , a a a 񮽙 , θ θ θ, φ φ φ, ψ ψ ψ, which are visual representations of power spectral density matrices.The basic idea of feature learning with CNN is to leverage the output of the model's intermediate layer as features thanks to the powerful feature representation of deep learning method [13,67].
In particular, we train the CNN model to distinguish different users with collected FINAUTH data, and employ the first k layers of the trained model as the feature extractor.
Even though the model is trained from a limited dataset, it can be used to extract generalized features because of the feature learning ability of CNN, which is also known as transfer learning [77].
Table 2 shows the structure of our used CNN model.
We use leaky rectified linear units (Leaky ReLu) as the activation functions for two-dimensional convolution (Conv2d) layers and fully connected (FC) layers, since it can tackle the vanishing gradient problem during the model training phase [50].
For the pooling layers, we use the max-pooling method to down-sample the input, which controls over-fitting and saves computational costs by reducing the number of parameters for training.
To avoid over-fitting, we add dropout layers after each pooling layer.
Furthermore, we also consider batch normalization (BN) layers to normalize the output of the previous layer, which accelerates model training and increases the stability of the model.
The softmax layer is added as the last layer for prediction, which outputs the categorical probability distribution of each class.
Specifically, the kernel size of Conv2d and pooling layers is set as 3 × 3 and 2 × 2 respectively, because of their better non-linear feature representation gaining popularity in start-of-art models [36,38,67].
The detailed output shape and the number of parameters of each layer are given as Table 2.
The total model contains 202, 974 parameters, including 202, 438 trainable and 536 non-trainable parameters.
In real-world fingerprint authentication settings, the training dataset only contains the legitimate user's data points.
Therefore, it is a one-class classification problem.
We use four methods to profile the legitimate user: i) Pearson correlation coefficient-based similarity comparison (PCC), ii) one-class support vector machine (OC-SVM), iii) local outlier factor (LOF), and iv) isolation forest (IF).
PCC is a similarity metric to measure the linear correlation between two variables.
The coefficient is between +1 and -1, where +1/-1 denotes a total positive or negative linear correlation, and 0 represents none linear correlation.
Specifically, after feature extraction, we compute the mean PCC between the extracted feature vector and fingertip-touch templates (i.e., saved feature vector during the register phase).
The computed mean PCC is then used to decide whether the user is authorized.
OC-SVM, an extended algorithm of SVM, maps data points into high-dimensional feature space with the kernel func- tion and finds the surface of a minimal hyper-sphere which contains the objective data points as many as possible.
The distance between data points and the hyper-sphere is the classification score, which is leveraged to conduct prediction.
OC-SVM has been successfully applied to many anomaly detection problems, such as utterance verification [37], malware detection [31], and online fault detection [78].
LOF measures the local deviation of the data point to its neighbors [18].
It decides whether a data point is an outlier using the anomaly score depending on the local density.
Specifically, locality density is estimated by k-nearest neighbors based on a given distance metric.
A data point with a substantially lower density than their neighbors will be regarded as an outlier.IF is a rapid one-class classification method for highdimensional data based on ensemble learning, which assumes that abnormal data points are easier to isolate from given one-class instances [47].
IF detects abnormal data points by subsampling the dataset to construct iTrees, and further integrate multiple iTrees into a forest to detect abnormal data.
A data point is seen as abnormal when these random trees collectively produce shorter path lengths for it.
To collect the experiment data, we develop a prototype system on Android 7.1 (API level 25).
Specifically, our implementation hooks the authenticate() method from the FingerprintManager class.
We set the data collection time (t) as 0.5 seconds and the sampling rate ( f s ) as 200 Hz.After receiving the IRB approval from our university in June 2018, we started recruiting subjects for the data collection, which lasted for 5 months.
To qualify for the experiment, a subject must self-identify as a frequent smartphone user who had been using fingerprint authentication for more than a year.
90 subjects were involved in finger-tip behavior data collection, who were aged from 22 to 45.
39 subjects were female, and 51 were male.
24 of them were students in our university, and the rest were employees in a company.
Another 15 subjects (4 from our university, 11 from the company), including 4 females and 11 males, were recruited to play the role of an attacker to carry out artificial replica attack, puppet attack and mimicry attack on the 90 subjects.We explained to each subject the purpose of this research project, the data we collect, and the steps we take to protect their personal identifiable information.
During the data collection, we asked each subject to hold a smartphone in hand as they normally unlock their own devices.
To help collect more distinct data points, we also suggested that they hold the device in different angles and directions.
Table 3 summarizes the compiled 4 datasets: 1) Dataset-1.
For this dataset, we used one smartphone (OnePlus 3 with 6G RAM) to eliminate factors that could be introduced by different phones.
This device has a capacitive fingerprint sensor that is integrated with the home button.
In week 1, the 24 subjects from our university were first asked to enroll their fingerprints on the phone.
Then, a subject needed to perform successful fingerprint logins for 500 times while sitting (stationary), and for 50 times while standing (stationary), lying (stationary), walking (moving), and running (moving), respectively.
Note that we only collect the finger-tip behavior data when a login is successful.
In week 8 and 9, the 66 subjects from the company went through the same data collection procedure.
Each subject spent 13 -17 minutes to finish this task.
As a result, we collected 90 × 700 = 63, 000 data points for the dataset-1.2) Dataset-2.
To evaluate the consistency of the fingertiptouch behavior features over the long term, we compiled the dataset-2 with the same subjects after some time intervals: i) dataset-2A.
The 24 subjects from our university came in week 2, 3, 5, 7 to perform 50 successful fingerprint authentications while sitting; ii) dataset-2B.
The subjects in the company did the same thing in week 10, 11, 12 and 13.
Some subjects did not show up for all the collections.
As a result, we collected 65, 200 data points in total for the dataset-2.3) Dataset-3.
To evaluate the generalization of FINAUTH on different devices, we collected the dataset-3 on 3 smartphones: Xperia XZ1 (side fingerprint sensor), Oneplus 5 (back fingerprint sensor), and Vivo X21 (in-screen fingerprint sensor).
The 22 subjects from our university were assigned to Xperia XZ1, while the 42 subjects from the company were assigned to the other two devices randomly.
Each subject was asked to conduct 50 authentications while sitting.
As a result, we collected 3, 200 data points for the dataset-3.4) Dataset-4.
We used artificial replica attack, puppet attack and mimicry attack to evaluate the effectiveness of FINAUTH.
It is infeasible to ask each attacker to attack all 90 subjects in all three experiments.
To increase the chance of successful attacks, we collected the fingertip-touch data of the 15 attackers and used Pearson correlation distance matrix to compute the distance between each attacker and each subject.
Then, we assign each attacker 6 subjects as his/her targets on the basis of fingertip-touch behavioral similarity: i) Dataset-4A: artificial replica attack.
We crafted a fingerprint spoof using the silicone rubber, as shown in Figure 4, for each of the 85 subjects (5 dropped out).
The spoofs were tested to make sure they can spoof the original fingerprint authentication.
After the experiments, the molds and synthetic spoofs were destroyed.
Each attacker was asked to spoof the fingerprint sensor while sitting for 50 attempts per subject.
We collected 50 × 85 = 4, 250 data points for the dataset-4A;ii) Dataset-4B: puppet attack.
Each attacker was asked to hold the device in her/his hand and place a subject's finger on the fingerprint sensor 50 times while both of them in sitting.
We collected 4, 250 data points for the dataset-4B.
Note that the unwillingness for this study is a subset of all possible puppet attacks since we do not have data on other kinds of unwillingness, e.g. the victim is sleeping or passed out;iii) Dataset-4C: mimicry attack.
Each attacker was asked to carefully observe a subject's hand and device movement in a close distance (no more than 2 feet).
After the attacker was confident about what they observed, she/he would mimick the subject's fingertip-touch behavior with the crafted fingerprint spoofs for 50 times.
We collected 4, 250 data points for the dataset-4C.
In this section, we report the evaluation results of the proposed system.
Section 7.1 presents the metrics we used in measuring the performance.
Section 7.2 shows evaluation on how distinguishable users' fingertip-touch behaviors are under different conditions using dataset-1, 2, and 3.
Section 7.3 evaluates FINAUTH's effectiveness against presentation attacks using dataset-4.
Section 7.4 presents system performance of FINAUTH.
Section C reports user acceptance of FINAUTH.
Section 7.5 illustrates other design considerations behind FINAUTH.Specifically, the base CNN was trained using cross-entropy as the loss function based on half (22, 500) data points of dataset-1 (collected while sitting) containing fingertip-touch behavior data from 90 classes (subjects).
We pre-trained base model on a PC with Intel i5-8300 CPU, 16GB RAM, GTX 1060 GPU, and the training process took 42 minutes.
Keras with TensorFlow backend was used for training.
The size of the total model is 1.54 MB, which is lightweight on mobile devices.
We use the following metrics to evaluate the effectiveness of FINAUTH.
True acceptance (TA) means fingertip-touch behaviors from legitimate users are correctly identified.
True rejection (TR) means fingertip-touch behaviors not from legitimate users are correctly declined.
False acceptance (FA) means fingertip-touch behaviors not from legitimate users are incorrectly identified as legitimate.
False rejection (FR) means fingertip-touch behaviors from legitimate users are incorrectly rejected.
False acceptance rate (FAR) is defined as FA FA+T R , which measures the proportion of illegal users who gain access.
False rejection rate (FRR) is defined as FR FR+TA , which measures the proportion of legitimate users who are denied access.
Balanced accuracy (BAC) is a metric used for evaluating models trained from unbalanced data [19].
It is defined as the average between true rejection rate (T RR = T R T R+FA ) and true acceptance rate (TAR = TA TA+FR ).
We also use receiver operation characteristic (ROC) curves to show dynamic changes of TAR against FAR at a varying decision threshold for performance comparison.
The area under the ROC curve (AUC) is used to estimate the probability that prediction scores of authorized users are higher than unauthorized users.
While in presentation attacks resistance evaluation, we leverage FAR, i.e., attack success rate, as the evaluation criteria, which is the ratio between the number of incorrectly identified data points and the number of all attack data points.
It implies the probability of attackers bypassing the authentication system.
Note that, FAR is more important in fingerprint authentication, e.g., achieving FAR as low as 10 −6 while still maintaining an FRR of 1% [5].
To find out how distinguishable each user's fingertip-touch behaviors are, we randomly split each user's data points, train layer) to the first fully-connect layer (11 th layer).
Table 4 shows the averaged BAC when using features extracted with different layers under different classifiers.
As the results show, with the features from the 11 th layer, classifiers achieve higher BAC.Results.
After determining the best k for the CNN-based feature learning, we obtained three feature sets: i) time-and frequency-domain features (TFF) extracted via feature extraction and selection (Section 4.1); ii) CNN-based features (CNF) extracted with the pre-trained model (Section 4.2); and iii) the union of feature sets of the aforementioned two (UnF).
We used the grid search to find the best parameter combinations for each classifier.
For OC-SVM, we found radial basis function works best with γ = 0.25 and ν = 0.1.
For IF, the optimal parameter of n_estimators was 20.
For LOF, we used Minkowski distance as the distance metric with the optimal parameter of n_neighbors as 5.
Figure 5 shows ROC curves of using the three feature sets under different one-class classifiers.
The results indicate that CNN-based features are more discriminative than time-and frequency-domain features.
Specifically, for PCC and LOF, the BAC of models using CNN-features is significantly higher than using time-and frequency-domain features.
However, the performance of OC-SVM and IF of CNN-based features is poorer.
Another observation is that the union of two feature sets brings slight improvement over only one feature set.
Table 5 shows the BAC, FAR, FRR, and AUC under different feature set and classifier combinations.
Even though UnF + LOF has the best BAC, CNF + LOF is the most reliable model with low FAR.
For the rest of the evaluations, we use the CNF + LOF approach.
We also evaluated the performance of FINAUTH when using non-overlapping subjects in training the base CNN and evaluating the authentication models.
We split these 90 subjects into two groups randomly and evenly.
One was used to train the base CNN as the feature extractor, and the other was used to evaluate the performance of authentication models.
5-fold cross-validation was used in the testing phase.
We used CNF + LOF and UnF + LOF on the sitting data points in dataset-1.
Table 6 shows the BAC, FAR, FRR, and AUC with nonoverlapping subjects in training base CNN and testing.
The mean BACs under CNF + LOF and UnF + LOF are 95.34% (compared with 97.99% in Table 5) and 95.59% (compared to 98.02%).
To find out how postures and moving affect the performance of FINAUTH, we used all of the 63, 000 data points of dataset-1.
For each user and each posture, we train a classifier using 30 data points in the training dataset.
Specifically, for each participant, the authentication model was trained with regard to five different postures respectively.
Next, the model was leveraged to evaluate the performance of different postures.
Figure 7 shows the BAC when using data points collected in different postures to train authentication models (x-axis) and evaluate performance (y-axis).
The results indicate that FINAUTH achieves better performance in stationary postures (e.g., sitting, standing, and lying) than moving (e.g., walking and running).
Authentication models trained in stationary pos- tures can be transferred to other stationary postures without downgrading obviously.
If we ignore 'running', which is rare in real-life, FINAUTH achieves over 94% BAC when profiling a user with 30 data points collected while sitting.
To investigate the impact of training set sizes, we changed the training set size from 5 to 100 in a step of 5 or 10 to profile the legitimate users.
Figure 6 shows the BAC for different classifiers with different training set sizes.
As expected, the results show that training with more data achieves a higher BAC.
Using CNN-based features or the union of two feature sets, LOF outperforms the other three classifiers.
With only 5 training data points and CNN-based features, LOF achieves the BAC of 96.04%, where its FAR is 1.12% and FRR is 6.80%.
With 100 training data points, LOF achieves the BAC of 99.28%, where its FAR and FRR are 0.045% and 1.39% respectively.
To find out how consistent users' fingerprint behaviors are over a long period, we used dataset-2 and the 45, 000 sitting data points of dataset-1.
The training data points were selected from dataset-1 (the first week of data collection), and test data points were from dataset-2.
Figure 8 shows the mean BAC, FAR, and FRR over different weeks with regard to dataset-2A and dataset-2B.
As the results show, behavior variability has an impact on the usability of FINAUTH, but little impact on security.
In particular, as shown in Figure 8(a), the BAC decreases from 96.34% to 90.13% under dataset-2A, where its FRR increases from 6.20% to 15.46% in 7 weeks.
While in Figure 8(b), the BAC decreases from 96.19% to 93.96% under dataset-2B, where its FRR increases from 6.50% to 9.69% in 5 weeks.
The FAR is almost stable in dataset-2A&B.
This demonstrates that FINAUTH is resilient against behavioral variability in a short period.
In particular, we assume that, in real applications, the problem of behavioral variability can be tackled by retraining the authentication model with newly collected data, namely model updating mechanism, which was adapted in Face ID [3].
To find out how the fingertip-touch data on different devices would affect the robustness of FINAUTH, we evaluated with the 45, 000 sitting data points of dataset-1 and dataset-3.
As shown in To investigate the defense against presentation attacks, we utilize dataset-4.
We report the FAR under CNF + LOF at varying training dataset sizes.
Figure 9(a) shows FAR under artificial replica attack using dataset-4A with varying training dataset size.
The overall BAC is less than 3%.
Specifically, the FAR is 2.01% when the model is trained with 10 data points, and it improves to 0.08% using 100 data points.
Figure 9(b) shows the FAR under puppet attack using dataset-4B with varying training dataset size.
The results indicate that FINAUTH resists against puppet attack with mean FAR below 2%.
Specifically, the mean FAR is 1.93% under the model trained with only 5 data points, and it is enhanced to 0.12% under the model trained using 100 data points.
Figure 9(c) shows the FAR under mimicry attack using dataset-4C.
The results show that it is very difficult for attackers to mimic the fingertip-touch behavior of users.
The attack success rate is 3.10% under models trained with 5 data points, and it improves to 0.25% with 100 data points.As the results show, FINAUTH is effective in defeating all three kinds of presentation attacks.
Using more legitimate data points to train the authentication model can strengthen the defense against various attacks.
FAR, and prediction scores under authentication models trained using 100 data points are shown in Table 8.
In particular, for prediction scores of all attack data points, the distribution and its kernel density evaluated under Gaussian kernel are shown in Figure 10.
We analyzed the system performance of FINAUTH on Oneplus 3, Redmi Note 4X, Xperia XZ1, and Vivo X21.
On each device, we performed authentication with the prototype for 50 times to evaluate the authentication delay, memory usage, and power consumption.Authentication Delay.
The delay is defined as the interval between the time when the authentication system detects the fingerprint authentication event to the time when the system generates the result.
It consists of the time for data collection, data processing, and classification.
Table 9 shows the delay of four smartphones.
The average delay is 713.34 ms, 722.93 ms, 630.72 ms, and 692.15 ms of our method under the four smartphones respectively.
Figure 11 shows cumulative dis- tribution function (CDF) of delay on different smartphones with and without FINAUTH.
For 90% attempts, the delay of FINAUTH is less than 742.39 ms, 749.83 ms, 643.26 ms, and 714.54 ms for Oneplus 3, Redmi Note 4X, Xperia XZ1, and Vivo X21, respectively.
Overall, FINAUTH only requires an average delay of 689.79 ms. In addition, the delay of our method is lower than existing methods on smartphones, such as PINs, pattern lock, and facial authentication.
This implies that FINAUTH can authenticate users timely.
Memory Usage.
We used Trepn Profiler 1 and Android Studio Profiler 2 to monitor the memory usage of FINAUTH.
Table 9 shows the memory usage of FINAUTH without consideration of graphics on four smartphones.
Specifically, the memory usages on four different smartphones are 62.99 MB, 57.82 MB, 48.77 MB, 81.19 MB.
The average memory usage is 62.69 MB, which incurs additional 14.92 MB compared with the original fingerprint authentication.Power Consumption.
Trepn Profiler was employed to provide mW -level power consumption estimation.
Power consumption is measured by subtracting screen power consumption while the screen is on.
The average power consumption overhead is 23.13 mW , which incurs additional 6.90 mW com-pared with original fingerprint authentication (Table 9).
To sum up, FINAUTH achieves a low authentication delay of 689.79 ms on commercial smartphones.
It requires a memory usage of 62.69 MB and power consumption of 23.13 mW .
Compared with the original fingerprint authentication, it introduces very little overhead and short delay.
To verify if our feature extraction is effective, we also attempted to construct another CNN-based feature extractor to extract features from denoised sensor data directly without characterizing fingertip-touch behavior.
We employed a similar model structure as shown in Table 2 and pre-trained the model with power spectral matrices of denoised sensor data as input to distinguish different users.
Then, we implemented end-to-end feature learning by inputting power spectral matrices of denoised sensor data to the model to extract features.
Figure 12(a) shows ROC curves when implementing endto-end feature learning with CNN.
Its best BAC is 61.10% with the training set size as 500.
While under our designed fingertip-touch behavior characterizing method (Section 3.2), the BAC reaches 93.11% with only 50 training data points to profiling the legitimate user.
As the results show, the step of fingertip-touch behavior characterizing significantly elimi- Figure 11: Authentication delay on different devices nates relying on deeper models and a larger number of training data points.We also evaluated an approach that utilizes a deep learning classification model [23].
We utilized the ALOCC model [60], which was proposed to combine a generative adversary network and an autoencoder to achieve one-class classification.
This model combines these two networks to learn the selfdistribution of the input in the training phase.
It determines whether a data point is an outlier by comparing the distance between its input and output with a threshold.
In our experiments, the input of this model is power spectral matrices of accelerations and rotation angles.
Figure 12(b) shows ROC curves under different training set size.
The best BAC to recognize different subjects is 76.14%, which is significantly poorer than our previous methods.
We suspect the reason is that ALOCC relies on a large number of training data points to learn self-distribution from input one-class data to enable the network robust.
Figure 12: (a): ROC curves when using CNN to learn features from denoised sensor data, (b): ROC curves when using ALOCC model as one-class classifier.
Fingerprint Presentation Attack Detection.
Fingerprint authentication is vulnerable to presentation attacks, which can be carried out easily at a low expense [39].
To enhance its security, various methods have been proposed, including the hardware-based and the software-based.
Hardware-based methods acquire life signs to determine the liveness of the input fingerprint, such as blood pressure [42], odor [15], oxygen saturation [59], heartbeat [10], and electrocardiograph [40].
These methods rely on dedicated hardware integrated with fingerprint authentication systems.
Software-based methods leverage image processing methods to extract discriminative features from fingerprint images and utilize machine learning techniques to enhance the defense against fingerprint spoofs.
Some methods concentrate on the fine-grained characteris-tics of captured fingerprint images, such as skin perspiration through the pores [54], skin deformation [12], and image quality [33].
Other methods resort to powerful deep learningbased approaches to learn features to distinguish between true and synthetic fingerprints [30,56].
Existing hardware-based and software-based methods only focus on fingerprint liveness detection.
They ignore the intended puppet attack, where the adversary may approach the victim and apply the victim's finger to the fingerprint sensor when the victim is unwilling, e.g., sleeping and fainting.
The significantly overlooked problem motivates us to enhance the widely used fingerprint authentication method.Behavioral Biometrics Authentication.
Behavioral biometrics authentication authenticates users based on inherent and unique user's behavior patterns, such as keystroke dynamics [25,34,45,65], signature [64], gesture [28,65,68], and gait patterns [49], where behaviors are captured through sensors on mobile devices.
However, they are vulnerable to behavior variability in real applications.
To handle this issue, behavioral biometric was also designed to fuse with physiological features to provide robust multi-touch authentication [69].
Besides, behavioral characteristics also served as complemented authentication factor to enable traditional knowledgebased authentication schemes (i.e. password/PINs, and pattern locks) resilient against security threats in a highly usable way [21,41,48].
Existing behavioral biometrics was designed to authenticate users when performing specific behaviors, such as typing or touching on a screen, writing a signature, or taking a walk.
However, it is extremely unnatural to perform such behaviors during fingerprint authentication to enhance its security.
Moreover, these methods are necessary to collect behavior data for a relatively long time (e.g., more than 1 second) [65], which will severely undermine the usability if combining these methods with fingerprint authentication.
Our proposed system overcomes such challenges.
We compare the differences in research question, authentication delay, feature extraction and classification methodologies of these systems in Appendix A.
We chose to use CNN in FINAUTH, because Bai et al. showed that a simple convolutional architecture outperforms canonical recurrent networks across a diverse range of sequence modeling tasks and datasets [14].
Nevertheless, it is worthwhile to evaluate the performance of recurrent neural network (RNN) and long short-term memory (LSTM) networks in future work.
Although we took great efforts to maintain our studies' validity, there are some limitations in our studies and experiments.
For example, behavior variability and different postures may incur additional false rejection, and undermine the usability and robustness of our method.
Also, FINAUTH requires the user to hand-hold the device.
If the device is placed on a desktop stationarily, FINAUTH will fail to work.
To solve this issue, FINAUTH can be improved by reminding users to pick the device during authentication if the device is detected not being handheld.
It is feasible to detect whether the device is on-hand or on-table using the built-in accelerometer [29].
Also, FINAUTH may falsely reject a legitimate user if she/he uses one hand to register while the other hand to perform authentication.
FINAUTH can also be enhanced by reminding users to get the device in the right hand if the device is not.The datasets we collected were from limited subjects, in which demographic characteristics, e.g., genders, regions, ages, were not perfectly balanced.
Fingertip-touch behaviors may differ between males and females, which we did not consider.
Older users, who have worked with their hands a lot and even have fingerprints worn away, may also have different fingertip behaviors from the general public.
In data collection, even though each subject was told to hold the device in different angles and directions to help collect more distinct data points, they were not required to place the phone down between attempts for their convenience.
To enable FINAUTH to work in real applications, it should further be tested to find out other underlying influential factors, which might undermine the performance.
As for these older users with their fingerprints worn away, the behavior-based methods might be effective for them.
Another concern is user privacy security.
Since the sensor data in FINAUTH is related to user behavior, preventing the sensor data from illegal access is of great significance.
Besides the aforementioned three types of presentation attacks, there also exist the following advanced attacks: 1) Sensor data injecting attack.
In FINAUTH, raw sensor data are acquired by calling operating system APIs, then processed and input into an authentication model.
Due to the imperfection of machine learning models, the adversary can generate adversarial examples to fool and bypass the authentication model by querying models repeatedly [22].
Next, the attacker can inject adversarial data to the sensor dataflow by hijacking OS APIs.
In this paper, we did not consider this type of attack.2) Adversarial input.
The following adversarial machine learning attacks are possible: i) model reverse attack [32]: the attacker aims to infer the training data points used to build the authentication model by querying the model interactively;ii) membership inference attack [66]: the attacker aims to infer whether the constructed data points belong to train set; iii) model stealing attack [74]: the attacker aims to use as few queries as possible to compute an approximation model that closely matches the target authentication model; iv) generating adversarial examples [22,53]: the attacker aims to generate adversarial examples to fool and bypass the authentication model by querying the target model interactively.3) Robotic attack.
Robotic attack is also a threat of behavioral biometrics [51].
For instance, the attacker can program the robotic arms, such as a Lego robot, to imitate legitimate user's fingertip-touch characteristics [61,62].
In this attack scenario, even though the attacker has none knowledge of authorized user's fingertip-touch characteristics, he/she could conduct lots of trials.
Eventually, it is possible for attackers to find out the correct behavior patterns and drive the robotic arms to perform this specific behavior.
Defending against this type of attack is also beyond the scope of our work.
To make FINAUTH more reliable and secure, there are several improvements to pursue in the future: i) enhancing the CNN-based feature extractor.
In our experiments, the CNNbased feature extractor is pre-trained with limited data points.
Collecting data from more users will significantly generalize the feature extractor; ii) mitigating the impact of postures.
Building the posture detection model using accelerometer data seems a promising method to tackle this problem [80]; iii) eliminating the impact of behavioral variability.
This problem can be tackled by retraining user authentication models using newly collected data to update users' profiles with time elapsing.
Similar approaches have been used in FaceID [3]; iv) investigating reliability using more data points.
To make FINAUTH more reliable in real-world scenarios, we can continue the evaluation with a more diverse population in the long-term and improve its performance.
In this paper, we presented FINAUTH, which complements fingerprint sensors to defend against presentation attacks, especially the puppet attack.
FINAUTH models the fingertiptouch characteristics when users apply their fingers to fingerprint sensors.
It relies upon common built-in sensors to capture instant behavioral characteristics to authenticate different users.
We designed effective methods to characterize the fingertip-touch behaviors and demonstrated that fingertiptouch behavior is distinguishable from person to person during fingerprint authentication.
To evaluate the performance of FINAUTH, we compiled datasets from 90 subjects.
The evaluation results demonstrate that FINAUTH is robust and can verify legitimate user with high BAC under minimum computation efforts while successfully denying the access requests from unauthorized users with a low false acceptance rate.
7.
Update the covariance matrix of the estimate error P P P e .
where P P P is the covariance matrix of the system, k is the timestamp.
Both P P P e and P P P are initialized with small values.
We initialize P P P e and P P P as diag (10 − where k is the timestamp.
10.
Update the covariance matrix of the whole system.
11.
According to the state vector, acquire the accurate angles as Eq.
7.
To find out how users perceive FINAUTH, we recruited another 43 subjects, including 12 females and 31 males.
These subjects did not participate in the data collections as shown in 3.
The subjects were asked to use FINAUTH to perform authentication on their smartphones for one week, and then rate our system.
Instead of using system usability scale [20] to measure usability, we focused on convenience, authentication delay, and FRR by asking the following three questions to all subjects:Q1 Was it easy and convenient to use our system compared to original fingerprint authentication?
(-2: Not at all, -1: Little, 0: Neutral, 1: Somewhat, 2: Very.)
Q2 Did you feel obvious delay during authentication compared to the original fingerprint authentication?
(-2: Very, -1: Somewhat, 0: Neutral, 1: Little, 2: Not at all.)
Q3 How often were you rejected by the FINAUTH?
(-2: Usually, -1: Often, 0: Seldom, 1: Rarely, 2: Never.)
For these questions, we employ 5 levels, from -2 to +2, to represent different levels of user preferences, where +2 corresponds to fully positive and -2 corresponds to fully negative about the system experience.
The average ratings of the three questions are all positive at 1.93, 1.44, 1.81, respectively.
We thank Kevin Butler and the anonymous reviewers for their comments.
This work is supported by the National Natural Science Foundation of China under Grant U1836202, Grant 61772383, Grant 61572380, Grant 61702379, the Joint Foundation of Ministry of Education under Grant 6141A02033341, the Foundation of Science, Technology and Innovation Commission of Shenzhen Municipality under Grant JCYJ20170303170108208, and the Foundation of Collaborative Innovation Center of Geospatial Technology.
sBesides the brief related work in Section 8, we also provide a detailed comparison between FINAUTH and typical methods published on top venues.
The comparison consists of the following aspects, including design goal, attack models, used features, and classification, which is shown in Table 10.
B Sensor Fusion based on EKFWe present the method for sensor data fusion based on EKF:1.
Initialize quaternion as Eq.
6.
2.
Define the system state vector x x x as Eq.
5.
3.
Apply normalization to three sensor data.4.
Calculate the projection of the altitude vector along three axes.5.
Then calculate the estimate error.
Besides the brief related work in Section 8, we also provide a detailed comparison between FINAUTH and typical methods published on top venues.
The comparison consists of the following aspects, including design goal, attack models, used features, and classification, which is shown in Table 10.
We present the method for sensor data fusion based on EKF:1.
Initialize quaternion as Eq.
6.
2.
Define the system state vector x x x as Eq.
5.
3.
Apply normalization to three sensor data.4.
Calculate the projection of the altitude vector along three axes.5.
Then calculate the estimate error.
